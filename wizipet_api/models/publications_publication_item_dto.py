# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.common_pet_profile_dto import CommonPetProfileDto
from wizipet_api.models.medias_video_dto import MediasVideoDto
from wizipet_api.models.publications_publication_group_dto import PublicationsPublicationGroupDto
from wizipet_api.models.publications_publication_type_dto import PublicationsPublicationTypeDto
from typing import Optional, Set
from typing_extensions import Self

class PublicationsPublicationItemDto(BaseModel):
    """
    PublicationsPublicationItemDto
    """ # noqa: E501
    id: Optional[UUID] = None
    group: Optional[PublicationsPublicationGroupDto] = None
    author: Optional[CommonPetProfileDto] = None
    publication_date: Optional[datetime] = None
    body: Optional[StrictStr] = None
    like_count: Optional[StrictInt] = None
    comment_count: Optional[StrictInt] = None
    share_count: Optional[StrictInt] = None
    image_id_list: Optional[List[UUID]] = None
    video_list: Optional[List[MediasVideoDto]] = None
    type: Optional[PublicationsPublicationTypeDto] = None
    is_actif_challenge: Optional[StrictBool] = None
    challenge_start_date: Optional[datetime] = None
    challenge_end_date: Optional[datetime] = None
    challenge_title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "group", "author", "publication_date", "body", "like_count", "comment_count", "share_count", "image_id_list", "video_list", "type", "is_actif_challenge", "challenge_start_date", "challenge_end_date", "challenge_title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicationsPublicationItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in video_list (list)
        _items = []
        if self.video_list:
            for _item_video_list in self.video_list:
                if _item_video_list:
                    _items.append(_item_video_list.to_dict())
            _dict['video_list'] = _items
        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['body'] = None

        # set to None if image_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.image_id_list is None and "image_id_list" in self.model_fields_set:
            _dict['image_id_list'] = None

        # set to None if video_list (nullable) is None
        # and model_fields_set contains the field
        if self.video_list is None and "video_list" in self.model_fields_set:
            _dict['video_list'] = None

        # set to None if challenge_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.challenge_start_date is None and "challenge_start_date" in self.model_fields_set:
            _dict['challenge_start_date'] = None

        # set to None if challenge_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.challenge_end_date is None and "challenge_end_date" in self.model_fields_set:
            _dict['challenge_end_date'] = None

        # set to None if challenge_title (nullable) is None
        # and model_fields_set contains the field
        if self.challenge_title is None and "challenge_title" in self.model_fields_set:
            _dict['challenge_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicationsPublicationItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PublicationsPublicationItemDto) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "group": PublicationsPublicationGroupDto.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "author": CommonPetProfileDto.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "publication_date": obj.get("publication_date"),
            "body": obj.get("body"),
            "like_count": obj.get("like_count"),
            "comment_count": obj.get("comment_count"),
            "share_count": obj.get("share_count"),
            "image_id_list": obj.get("image_id_list"),
            "video_list": [MediasVideoDto.from_dict(_item) for _item in obj["video_list"]] if obj.get("video_list") is not None else None,
            "type": obj.get("type"),
            "is_actif_challenge": obj.get("is_actif_challenge"),
            "challenge_start_date": obj.get("challenge_start_date"),
            "challenge_end_date": obj.get("challenge_end_date"),
            "challenge_title": obj.get("challenge_title")
        })
        return _obj


