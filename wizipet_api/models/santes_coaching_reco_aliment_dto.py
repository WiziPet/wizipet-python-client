# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from uuid import UUID
from wizipet_api.models.santes_aliment_catalogue_properties_dto import SantesAlimentCataloguePropertiesDto
from wizipet_api.models.santes_aliment_type_dto import SantesAlimentTypeDto
from wizipet_api.models.santes_nombre_repas_dto import SantesNombreRepasDto
from typing import Optional, Set
from typing_extensions import Self

class SantesCoachingRecoAlimentDto(BaseModel):
    """
    SantesCoachingRecoAlimentDto
    """ # noqa: E501
    ration_100be_g: Optional[StrictInt] = None
    ration_80be_g: Optional[StrictInt] = None
    nbr_repas: Optional[SantesNombreRepasDto] = None
    id: Optional[UUID] = None
    type: Optional[SantesAlimentTypeDto] = None
    name: Optional[StrictStr] = None
    proteine_brutes_percent: Optional[Union[StrictFloat, StrictInt]] = None
    matiere_grasse_percent: Optional[Union[StrictFloat, StrictInt]] = None
    cellulose_brutes_percent: Optional[Union[StrictFloat, StrictInt]] = None
    cendres_brutes_percent: Optional[Union[StrictFloat, StrictInt]] = None
    humidite_percent: Optional[Union[StrictFloat, StrictInt]] = None
    catalogue_properties: Optional[SantesAlimentCataloguePropertiesDto] = None
    __properties: ClassVar[List[str]] = ["ration_100be_g", "ration_80be_g", "nbr_repas", "id", "type", "name", "proteine_brutes_percent", "matiere_grasse_percent", "cellulose_brutes_percent", "cendres_brutes_percent", "humidite_percent", "catalogue_properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SantesCoachingRecoAlimentDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of catalogue_properties
        if self.catalogue_properties:
            _dict['catalogue_properties'] = self.catalogue_properties.to_dict()
        # set to None if ration_100be_g (nullable) is None
        # and model_fields_set contains the field
        if self.ration_100be_g is None and "ration_100be_g" in self.model_fields_set:
            _dict['ration_100be_g'] = None

        # set to None if ration_80be_g (nullable) is None
        # and model_fields_set contains the field
        if self.ration_80be_g is None and "ration_80be_g" in self.model_fields_set:
            _dict['ration_80be_g'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SantesCoachingRecoAlimentDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SantesCoachingRecoAlimentDto) in the input: " + _key)

        _obj = cls.model_validate({
            "ration_100be_g": obj.get("ration_100be_g"),
            "ration_80be_g": obj.get("ration_80be_g"),
            "nbr_repas": obj.get("nbr_repas"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "proteine_brutes_percent": obj.get("proteine_brutes_percent"),
            "matiere_grasse_percent": obj.get("matiere_grasse_percent"),
            "cellulose_brutes_percent": obj.get("cellulose_brutes_percent"),
            "cendres_brutes_percent": obj.get("cendres_brutes_percent"),
            "humidite_percent": obj.get("humidite_percent"),
            "catalogue_properties": SantesAlimentCataloguePropertiesDto.from_dict(obj["catalogue_properties"]) if obj.get("catalogue_properties") is not None else None
        })
        return _obj


