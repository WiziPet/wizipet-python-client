# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wizipet_api.models.googles_address_component_dto import GooglesAddressComponentDto
from wizipet_api.models.googles_geometry_dto import GooglesGeometryDto
from wizipet_api.models.googles_place_editorial_summary_dto import GooglesPlaceEditorialSummaryDto
from wizipet_api.models.googles_place_opening_hours_dto import GooglesPlaceOpeningHoursDto
from wizipet_api.models.googles_place_photo_dto import GooglesPlacePhotoDto
from wizipet_api.models.googles_place_review_dto import GooglesPlaceReviewDto
from wizipet_api.models.googles_plus_code_dto import GooglesPlusCodeDto
from typing import Optional, Set
from typing_extensions import Self

class GooglesPlaceDto(BaseModel):
    """
    GooglesPlaceDto
    """ # noqa: E501
    address_components: Optional[List[GooglesAddressComponentDto]] = None
    adr_address: Optional[StrictStr] = None
    business_status: Optional[StrictStr] = None
    curbside_pickup: Optional[StrictBool] = None
    current_opening_hours: Optional[GooglesPlaceOpeningHoursDto] = None
    delivery: Optional[StrictBool] = None
    dine_in: Optional[StrictBool] = None
    editorial_summary: Optional[GooglesPlaceEditorialSummaryDto] = None
    formatted_address: Optional[StrictStr] = None
    formatted_phone_number: Optional[StrictStr] = None
    geometry: Optional[GooglesGeometryDto] = None
    icon: Optional[StrictStr] = None
    icon_background_color: Optional[StrictStr] = None
    icon_mask_base_uri: Optional[StrictStr] = None
    international_phone_number: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    opening_hours: Optional[GooglesPlaceOpeningHoursDto] = None
    photos: Optional[List[GooglesPlacePhotoDto]] = None
    place_id: Optional[StrictStr] = None
    plus_code: Optional[GooglesPlusCodeDto] = None
    price_level: Optional[StrictInt] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    reservable: Optional[StrictBool] = None
    reviews: Optional[List[GooglesPlaceReviewDto]] = None
    secondary_opening_hours: Optional[List[GooglesPlaceOpeningHoursDto]] = None
    serves_beer: Optional[StrictBool] = None
    serves_breakfast: Optional[StrictBool] = None
    serves_brunch: Optional[StrictBool] = None
    serves_dinner: Optional[StrictBool] = None
    serves_lunch: Optional[StrictBool] = None
    serves_vegetarian_food: Optional[StrictBool] = None
    serves_wine: Optional[StrictBool] = None
    takeout: Optional[StrictBool] = None
    types: Optional[List[StrictStr]] = None
    url: Optional[StrictStr] = None
    user_ratings_total: Optional[StrictInt] = None
    utc_offset: Optional[StrictInt] = None
    vicinity: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    wheelchair_accessible_entrance: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["address_components", "adr_address", "business_status", "curbside_pickup", "current_opening_hours", "delivery", "dine_in", "editorial_summary", "formatted_address", "formatted_phone_number", "geometry", "icon", "icon_background_color", "icon_mask_base_uri", "international_phone_number", "name", "opening_hours", "photos", "place_id", "plus_code", "price_level", "rating", "reservable", "reviews", "secondary_opening_hours", "serves_beer", "serves_breakfast", "serves_brunch", "serves_dinner", "serves_lunch", "serves_vegetarian_food", "serves_wine", "takeout", "types", "url", "user_ratings_total", "utc_offset", "vicinity", "website", "wheelchair_accessible_entrance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglesPlaceDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address_components (list)
        _items = []
        if self.address_components:
            for _item_address_components in self.address_components:
                if _item_address_components:
                    _items.append(_item_address_components.to_dict())
            _dict['address_components'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_opening_hours
        if self.current_opening_hours:
            _dict['current_opening_hours'] = self.current_opening_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of editorial_summary
        if self.editorial_summary:
            _dict['editorial_summary'] = self.editorial_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening_hours
        if self.opening_hours:
            _dict['opening_hours'] = self.opening_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item_photos in self.photos:
                if _item_photos:
                    _items.append(_item_photos.to_dict())
            _dict['photos'] = _items
        # override the default output from pydantic by calling `to_dict()` of plus_code
        if self.plus_code:
            _dict['plus_code'] = self.plus_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reviews (list)
        _items = []
        if self.reviews:
            for _item_reviews in self.reviews:
                if _item_reviews:
                    _items.append(_item_reviews.to_dict())
            _dict['reviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secondary_opening_hours (list)
        _items = []
        if self.secondary_opening_hours:
            for _item_secondary_opening_hours in self.secondary_opening_hours:
                if _item_secondary_opening_hours:
                    _items.append(_item_secondary_opening_hours.to_dict())
            _dict['secondary_opening_hours'] = _items
        # set to None if address_components (nullable) is None
        # and model_fields_set contains the field
        if self.address_components is None and "address_components" in self.model_fields_set:
            _dict['address_components'] = None

        # set to None if adr_address (nullable) is None
        # and model_fields_set contains the field
        if self.adr_address is None and "adr_address" in self.model_fields_set:
            _dict['adr_address'] = None

        # set to None if business_status (nullable) is None
        # and model_fields_set contains the field
        if self.business_status is None and "business_status" in self.model_fields_set:
            _dict['business_status'] = None

        # set to None if curbside_pickup (nullable) is None
        # and model_fields_set contains the field
        if self.curbside_pickup is None and "curbside_pickup" in self.model_fields_set:
            _dict['curbside_pickup'] = None

        # set to None if delivery (nullable) is None
        # and model_fields_set contains the field
        if self.delivery is None and "delivery" in self.model_fields_set:
            _dict['delivery'] = None

        # set to None if dine_in (nullable) is None
        # and model_fields_set contains the field
        if self.dine_in is None and "dine_in" in self.model_fields_set:
            _dict['dine_in'] = None

        # set to None if formatted_address (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_address is None and "formatted_address" in self.model_fields_set:
            _dict['formatted_address'] = None

        # set to None if formatted_phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_phone_number is None and "formatted_phone_number" in self.model_fields_set:
            _dict['formatted_phone_number'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if icon_background_color (nullable) is None
        # and model_fields_set contains the field
        if self.icon_background_color is None and "icon_background_color" in self.model_fields_set:
            _dict['icon_background_color'] = None

        # set to None if icon_mask_base_uri (nullable) is None
        # and model_fields_set contains the field
        if self.icon_mask_base_uri is None and "icon_mask_base_uri" in self.model_fields_set:
            _dict['icon_mask_base_uri'] = None

        # set to None if international_phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.international_phone_number is None and "international_phone_number" in self.model_fields_set:
            _dict['international_phone_number'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if photos (nullable) is None
        # and model_fields_set contains the field
        if self.photos is None and "photos" in self.model_fields_set:
            _dict['photos'] = None

        # set to None if place_id (nullable) is None
        # and model_fields_set contains the field
        if self.place_id is None and "place_id" in self.model_fields_set:
            _dict['place_id'] = None

        # set to None if price_level (nullable) is None
        # and model_fields_set contains the field
        if self.price_level is None and "price_level" in self.model_fields_set:
            _dict['price_level'] = None

        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        # set to None if reservable (nullable) is None
        # and model_fields_set contains the field
        if self.reservable is None and "reservable" in self.model_fields_set:
            _dict['reservable'] = None

        # set to None if reviews (nullable) is None
        # and model_fields_set contains the field
        if self.reviews is None and "reviews" in self.model_fields_set:
            _dict['reviews'] = None

        # set to None if secondary_opening_hours (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_opening_hours is None and "secondary_opening_hours" in self.model_fields_set:
            _dict['secondary_opening_hours'] = None

        # set to None if serves_beer (nullable) is None
        # and model_fields_set contains the field
        if self.serves_beer is None and "serves_beer" in self.model_fields_set:
            _dict['serves_beer'] = None

        # set to None if serves_breakfast (nullable) is None
        # and model_fields_set contains the field
        if self.serves_breakfast is None and "serves_breakfast" in self.model_fields_set:
            _dict['serves_breakfast'] = None

        # set to None if serves_brunch (nullable) is None
        # and model_fields_set contains the field
        if self.serves_brunch is None and "serves_brunch" in self.model_fields_set:
            _dict['serves_brunch'] = None

        # set to None if serves_dinner (nullable) is None
        # and model_fields_set contains the field
        if self.serves_dinner is None and "serves_dinner" in self.model_fields_set:
            _dict['serves_dinner'] = None

        # set to None if serves_lunch (nullable) is None
        # and model_fields_set contains the field
        if self.serves_lunch is None and "serves_lunch" in self.model_fields_set:
            _dict['serves_lunch'] = None

        # set to None if serves_vegetarian_food (nullable) is None
        # and model_fields_set contains the field
        if self.serves_vegetarian_food is None and "serves_vegetarian_food" in self.model_fields_set:
            _dict['serves_vegetarian_food'] = None

        # set to None if serves_wine (nullable) is None
        # and model_fields_set contains the field
        if self.serves_wine is None and "serves_wine" in self.model_fields_set:
            _dict['serves_wine'] = None

        # set to None if takeout (nullable) is None
        # and model_fields_set contains the field
        if self.takeout is None and "takeout" in self.model_fields_set:
            _dict['takeout'] = None

        # set to None if types (nullable) is None
        # and model_fields_set contains the field
        if self.types is None and "types" in self.model_fields_set:
            _dict['types'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if user_ratings_total (nullable) is None
        # and model_fields_set contains the field
        if self.user_ratings_total is None and "user_ratings_total" in self.model_fields_set:
            _dict['user_ratings_total'] = None

        # set to None if utc_offset (nullable) is None
        # and model_fields_set contains the field
        if self.utc_offset is None and "utc_offset" in self.model_fields_set:
            _dict['utc_offset'] = None

        # set to None if vicinity (nullable) is None
        # and model_fields_set contains the field
        if self.vicinity is None and "vicinity" in self.model_fields_set:
            _dict['vicinity'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if wheelchair_accessible_entrance (nullable) is None
        # and model_fields_set contains the field
        if self.wheelchair_accessible_entrance is None and "wheelchair_accessible_entrance" in self.model_fields_set:
            _dict['wheelchair_accessible_entrance'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglesPlaceDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GooglesPlaceDto) in the input: " + _key)

        _obj = cls.model_validate({
            "address_components": [GooglesAddressComponentDto.from_dict(_item) for _item in obj["address_components"]] if obj.get("address_components") is not None else None,
            "adr_address": obj.get("adr_address"),
            "business_status": obj.get("business_status"),
            "curbside_pickup": obj.get("curbside_pickup"),
            "current_opening_hours": GooglesPlaceOpeningHoursDto.from_dict(obj["current_opening_hours"]) if obj.get("current_opening_hours") is not None else None,
            "delivery": obj.get("delivery"),
            "dine_in": obj.get("dine_in"),
            "editorial_summary": GooglesPlaceEditorialSummaryDto.from_dict(obj["editorial_summary"]) if obj.get("editorial_summary") is not None else None,
            "formatted_address": obj.get("formatted_address"),
            "formatted_phone_number": obj.get("formatted_phone_number"),
            "geometry": GooglesGeometryDto.from_dict(obj["geometry"]) if obj.get("geometry") is not None else None,
            "icon": obj.get("icon"),
            "icon_background_color": obj.get("icon_background_color"),
            "icon_mask_base_uri": obj.get("icon_mask_base_uri"),
            "international_phone_number": obj.get("international_phone_number"),
            "name": obj.get("name"),
            "opening_hours": GooglesPlaceOpeningHoursDto.from_dict(obj["opening_hours"]) if obj.get("opening_hours") is not None else None,
            "photos": [GooglesPlacePhotoDto.from_dict(_item) for _item in obj["photos"]] if obj.get("photos") is not None else None,
            "place_id": obj.get("place_id"),
            "plus_code": GooglesPlusCodeDto.from_dict(obj["plus_code"]) if obj.get("plus_code") is not None else None,
            "price_level": obj.get("price_level"),
            "rating": obj.get("rating"),
            "reservable": obj.get("reservable"),
            "reviews": [GooglesPlaceReviewDto.from_dict(_item) for _item in obj["reviews"]] if obj.get("reviews") is not None else None,
            "secondary_opening_hours": [GooglesPlaceOpeningHoursDto.from_dict(_item) for _item in obj["secondary_opening_hours"]] if obj.get("secondary_opening_hours") is not None else None,
            "serves_beer": obj.get("serves_beer"),
            "serves_breakfast": obj.get("serves_breakfast"),
            "serves_brunch": obj.get("serves_brunch"),
            "serves_dinner": obj.get("serves_dinner"),
            "serves_lunch": obj.get("serves_lunch"),
            "serves_vegetarian_food": obj.get("serves_vegetarian_food"),
            "serves_wine": obj.get("serves_wine"),
            "takeout": obj.get("takeout"),
            "types": obj.get("types"),
            "url": obj.get("url"),
            "user_ratings_total": obj.get("user_ratings_total"),
            "utc_offset": obj.get("utc_offset"),
            "vicinity": obj.get("vicinity"),
            "website": obj.get("website"),
            "wheelchair_accessible_entrance": obj.get("wheelchair_accessible_entrance")
        })
        return _obj


