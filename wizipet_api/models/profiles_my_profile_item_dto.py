# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.profiles_alerte_perte_dto import ProfilesAlertePerteDto
from wizipet_api.models.profiles_gender_dto import ProfilesGenderDto
from typing import Optional, Set
from typing_extensions import Self

class ProfilesMyProfileItemDto(BaseModel):
    """
    ProfilesMyProfileItemDto
    """ # noqa: E501
    id: Optional[UUID] = None
    owner_id: Optional[UUID] = None
    pet_name: Optional[StrictStr] = None
    personality: Optional[StrictStr] = None
    race_id: Optional[UUID] = None
    picture_id: Optional[UUID] = None
    gender: Optional[ProfilesGenderDto] = None
    birthday: Optional[StrictStr] = None
    ville: Optional[StrictStr] = None
    friend_count: Optional[StrictInt] = None
    group_count: Optional[StrictInt] = None
    profile_creation_order: Optional[StrictInt] = None
    alerte_perte: Optional[ProfilesAlertePerteDto] = None
    __properties: ClassVar[List[str]] = ["id", "owner_id", "pet_name", "personality", "race_id", "picture_id", "gender", "birthday", "ville", "friend_count", "group_count", "profile_creation_order", "alerte_perte"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfilesMyProfileItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alerte_perte
        if self.alerte_perte:
            _dict['alerte_perte'] = self.alerte_perte.to_dict()
        # set to None if pet_name (nullable) is None
        # and model_fields_set contains the field
        if self.pet_name is None and "pet_name" in self.model_fields_set:
            _dict['pet_name'] = None

        # set to None if personality (nullable) is None
        # and model_fields_set contains the field
        if self.personality is None and "personality" in self.model_fields_set:
            _dict['personality'] = None

        # set to None if picture_id (nullable) is None
        # and model_fields_set contains the field
        if self.picture_id is None and "picture_id" in self.model_fields_set:
            _dict['picture_id'] = None

        # set to None if ville (nullable) is None
        # and model_fields_set contains the field
        if self.ville is None and "ville" in self.model_fields_set:
            _dict['ville'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfilesMyProfileItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ProfilesMyProfileItemDto) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "owner_id": obj.get("owner_id"),
            "pet_name": obj.get("pet_name"),
            "personality": obj.get("personality"),
            "race_id": obj.get("race_id"),
            "picture_id": obj.get("picture_id"),
            "gender": obj.get("gender"),
            "birthday": obj.get("birthday"),
            "ville": obj.get("ville"),
            "friend_count": obj.get("friend_count"),
            "group_count": obj.get("group_count"),
            "profile_creation_order": obj.get("profile_creation_order"),
            "alerte_perte": ProfilesAlertePerteDto.from_dict(obj["alerte_perte"]) if obj.get("alerte_perte") is not None else None
        })
        return _obj


