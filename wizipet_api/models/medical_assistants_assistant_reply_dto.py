# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from wizipet_api.models.medical_assistants_definitive_answer_properties_dto import MedicalAssistantsDefinitiveAnswerPropertiesDto
from wizipet_api.models.medical_assistants_pick_a_choice_properties_dto import MedicalAssistantsPickAChoicePropertiesDto
from wizipet_api.models.medical_assistants_reply_type_dto import MedicalAssistantsReplyTypeDto
from typing import Optional, Set
from typing_extensions import Self

class MedicalAssistantsAssistantReplyDto(BaseModel):
    """
    MedicalAssistantsAssistantReplyDto
    """ # noqa: E501
    type: Optional[MedicalAssistantsReplyTypeDto] = None
    pick_a_choice_properties: Optional[MedicalAssistantsPickAChoicePropertiesDto] = None
    definive_answer_properties: Optional[MedicalAssistantsDefinitiveAnswerPropertiesDto] = None
    __properties: ClassVar[List[str]] = ["type", "pick_a_choice_properties", "definive_answer_properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MedicalAssistantsAssistantReplyDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pick_a_choice_properties
        if self.pick_a_choice_properties:
            _dict['pick_a_choice_properties'] = self.pick_a_choice_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definive_answer_properties
        if self.definive_answer_properties:
            _dict['definive_answer_properties'] = self.definive_answer_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MedicalAssistantsAssistantReplyDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in MedicalAssistantsAssistantReplyDto) in the input: " + _key)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "pick_a_choice_properties": MedicalAssistantsPickAChoicePropertiesDto.from_dict(obj["pick_a_choice_properties"]) if obj.get("pick_a_choice_properties") is not None else None,
            "definive_answer_properties": MedicalAssistantsDefinitiveAnswerPropertiesDto.from_dict(obj["definive_answer_properties"]) if obj.get("definive_answer_properties") is not None else None
        })
        return _obj


