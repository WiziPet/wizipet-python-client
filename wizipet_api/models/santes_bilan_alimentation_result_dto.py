# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wizipet_api.models.santes_alimentation_status_dto import SantesAlimentationStatusDto
from wizipet_api.models.santes_qte_friandise_dto import SantesQteFriandiseDto
from wizipet_api.models.santes_reco_aliment_catalogue_item_dto import SantesRecoAlimentCatalogueItemDto
from wizipet_api.models.santes_section_status_dto import SantesSectionStatusDto
from typing import Optional, Set
from typing_extensions import Self

class SantesBilanAlimentationResultDto(BaseModel):
    """
    SantesBilanAlimentationResultDto
    """ # noqa: E501
    aer: Optional[StrictInt] = Field(default=None, description="Apport énergétique actuel. Somme des apports énergétique de l'aliment 1 et 2.  En Kcal")
    reco_dose: Optional[StrictInt] = Field(default=None, description="Dose recommandée.  En Kcal")
    rpc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rapport protido-calorique de l'aliment principal.  En g/Mcal")
    reco_aliment_list: Optional[List[SantesRecoAlimentCatalogueItemDto]] = Field(default=None, description="Liste des recommandation d'aliment. Peut contenir 3 à 5 aliments (3 si l'aliment principal == recommandation 1; 4 ou 5 sinon)                Recommandation 1:  Aliment de la marque de l'aliment principal et de la gamme \"Obésité\" ou \"SurPoids\" en fonction de l'état de l'animal.  Recommandation 2 et 3:  Aliments non utilisés actuellement et de la gamme \"Obésité\" ou \"SurPoids\" en fonction de l'état de l'animal.")
    qte_friandise: Optional[SantesQteFriandiseDto] = None
    alimentation_status: Optional[SantesAlimentationStatusDto] = None
    last_update: Optional[datetime] = None
    diagnostic: Optional[StrictStr] = None
    status: Optional[SantesSectionStatusDto] = None
    __properties: ClassVar[List[str]] = ["aer", "reco_dose", "rpc", "reco_aliment_list", "qte_friandise", "alimentation_status", "last_update", "diagnostic", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SantesBilanAlimentationResultDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reco_aliment_list (list)
        _items = []
        if self.reco_aliment_list:
            for _item_reco_aliment_list in self.reco_aliment_list:
                if _item_reco_aliment_list:
                    _items.append(_item_reco_aliment_list.to_dict())
            _dict['reco_aliment_list'] = _items
        # set to None if aer (nullable) is None
        # and model_fields_set contains the field
        if self.aer is None and "aer" in self.model_fields_set:
            _dict['aer'] = None

        # set to None if reco_dose (nullable) is None
        # and model_fields_set contains the field
        if self.reco_dose is None and "reco_dose" in self.model_fields_set:
            _dict['reco_dose'] = None

        # set to None if rpc (nullable) is None
        # and model_fields_set contains the field
        if self.rpc is None and "rpc" in self.model_fields_set:
            _dict['rpc'] = None

        # set to None if reco_aliment_list (nullable) is None
        # and model_fields_set contains the field
        if self.reco_aliment_list is None and "reco_aliment_list" in self.model_fields_set:
            _dict['reco_aliment_list'] = None

        # set to None if last_update (nullable) is None
        # and model_fields_set contains the field
        if self.last_update is None and "last_update" in self.model_fields_set:
            _dict['last_update'] = None

        # set to None if diagnostic (nullable) is None
        # and model_fields_set contains the field
        if self.diagnostic is None and "diagnostic" in self.model_fields_set:
            _dict['diagnostic'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SantesBilanAlimentationResultDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SantesBilanAlimentationResultDto) in the input: " + _key)

        _obj = cls.model_validate({
            "aer": obj.get("aer"),
            "reco_dose": obj.get("reco_dose"),
            "rpc": obj.get("rpc"),
            "reco_aliment_list": [SantesRecoAlimentCatalogueItemDto.from_dict(_item) for _item in obj["reco_aliment_list"]] if obj.get("reco_aliment_list") is not None else None,
            "qte_friandise": obj.get("qte_friandise"),
            "alimentation_status": obj.get("alimentation_status"),
            "last_update": obj.get("last_update"),
            "diagnostic": obj.get("diagnostic"),
            "status": obj.get("status")
        })
        return _obj


