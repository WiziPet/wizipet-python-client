# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.vaccins_vaccin_protocol_dto import VaccinsVaccinProtocolDto
from typing import Optional, Set
from typing_extensions import Self

class VaccinsPostVaccinationDto(BaseModel):
    """
    VaccinsPostVaccinationDto
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    commentaire: Optional[StrictStr] = None
    vaccin_id_list: Optional[List[UUID]] = None
    vaccin_protocol: Optional[VaccinsVaccinProtocolDto] = None
    __properties: ClassVar[List[str]] = ["date", "commentaire", "vaccin_id_list", "vaccin_protocol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VaccinsPostVaccinationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if commentaire (nullable) is None
        # and model_fields_set contains the field
        if self.commentaire is None and "commentaire" in self.model_fields_set:
            _dict['commentaire'] = None

        # set to None if vaccin_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.vaccin_id_list is None and "vaccin_id_list" in self.model_fields_set:
            _dict['vaccin_id_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VaccinsPostVaccinationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in VaccinsPostVaccinationDto) in the input: " + _key)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "commentaire": obj.get("commentaire"),
            "vaccin_id_list": obj.get("vaccin_id_list"),
            "vaccin_protocol": obj.get("vaccin_protocol")
        })
        return _obj


