# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wizipet_api.models.googles_place_opening_hours_period_dto import GooglesPlaceOpeningHoursPeriodDto
from wizipet_api.models.googles_place_special_day_dto import GooglesPlaceSpecialDayDto
from typing import Optional, Set
from typing_extensions import Self

class GooglesPlaceOpeningHoursDto(BaseModel):
    """
    GooglesPlaceOpeningHoursDto
    """ # noqa: E501
    open_now: Optional[StrictBool] = None
    periods: Optional[List[GooglesPlaceOpeningHoursPeriodDto]] = None
    special_days: Optional[List[GooglesPlaceSpecialDayDto]] = None
    types: Optional[List[StrictStr]] = None
    weekday_text: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["open_now", "periods", "special_days", "types", "weekday_text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglesPlaceOpeningHoursDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_days (list)
        _items = []
        if self.special_days:
            for _item_special_days in self.special_days:
                if _item_special_days:
                    _items.append(_item_special_days.to_dict())
            _dict['special_days'] = _items
        # set to None if open_now (nullable) is None
        # and model_fields_set contains the field
        if self.open_now is None and "open_now" in self.model_fields_set:
            _dict['open_now'] = None

        # set to None if periods (nullable) is None
        # and model_fields_set contains the field
        if self.periods is None and "periods" in self.model_fields_set:
            _dict['periods'] = None

        # set to None if special_days (nullable) is None
        # and model_fields_set contains the field
        if self.special_days is None and "special_days" in self.model_fields_set:
            _dict['special_days'] = None

        # set to None if types (nullable) is None
        # and model_fields_set contains the field
        if self.types is None and "types" in self.model_fields_set:
            _dict['types'] = None

        # set to None if weekday_text (nullable) is None
        # and model_fields_set contains the field
        if self.weekday_text is None and "weekday_text" in self.model_fields_set:
            _dict['weekday_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglesPlaceOpeningHoursDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GooglesPlaceOpeningHoursDto) in the input: " + _key)

        _obj = cls.model_validate({
            "open_now": obj.get("open_now"),
            "periods": [GooglesPlaceOpeningHoursPeriodDto.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None,
            "special_days": [GooglesPlaceSpecialDayDto.from_dict(_item) for _item in obj["special_days"]] if obj.get("special_days") is not None else None,
            "types": obj.get("types"),
            "weekday_text": obj.get("weekday_text")
        })
        return _obj


