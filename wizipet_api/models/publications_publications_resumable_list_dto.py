# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wizipet_api.models.publications_publication_item_dto import PublicationsPublicationItemDto
from typing import Optional, Set
from typing_extensions import Self

class PublicationsPublicationsResumableListDto(BaseModel):
    """
    PublicationsPublicationsResumableListDto
    """ # noqa: E501
    has_more: Optional[StrictBool] = None
    count: Optional[StrictInt] = None
    continuation_token: Optional[StrictStr] = None
    has_active_challenges: Optional[StrictBool] = None
    data: Optional[List[PublicationsPublicationItemDto]] = None
    is_success: Optional[StrictBool] = None
    error_code: Optional[StrictStr] = None
    error_message: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["has_more", "count", "continuation_token", "has_active_challenges", "data", "is_success", "error_code", "error_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicationsPublicationsResumableListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        # set to None if continuation_token (nullable) is None
        # and model_fields_set contains the field
        if self.continuation_token is None and "continuation_token" in self.model_fields_set:
            _dict['continuation_token'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['error_code'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicationsPublicationsResumableListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PublicationsPublicationsResumableListDto) in the input: " + _key)

        _obj = cls.model_validate({
            "has_more": obj.get("has_more"),
            "count": obj.get("count"),
            "continuation_token": obj.get("continuation_token"),
            "has_active_challenges": obj.get("has_active_challenges"),
            "data": [PublicationsPublicationItemDto.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "is_success": obj.get("is_success"),
            "error_code": obj.get("error_code"),
            "error_message": obj.get("error_message")
        })
        return _obj


