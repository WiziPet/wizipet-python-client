# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class PlacesPetFriendlyReviewDto(BaseModel):
    """
    PlacesPetFriendlyReviewDto
    """ # noqa: E501
    pet_id: Optional[UUID] = None
    race_id: Optional[UUID] = None
    media_id: Optional[UUID] = None
    pet_name: Optional[StrictStr] = None
    review_count: Optional[StrictInt] = 1
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    created_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["pet_id", "race_id", "media_id", "pet_name", "review_count", "rating", "created_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlacesPetFriendlyReviewDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if media_id (nullable) is None
        # and model_fields_set contains the field
        if self.media_id is None and "media_id" in self.model_fields_set:
            _dict['media_id'] = None

        # set to None if pet_name (nullable) is None
        # and model_fields_set contains the field
        if self.pet_name is None and "pet_name" in self.model_fields_set:
            _dict['pet_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlacesPetFriendlyReviewDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PlacesPetFriendlyReviewDto) in the input: " + _key)

        _obj = cls.model_validate({
            "pet_id": obj.get("pet_id"),
            "race_id": obj.get("race_id"),
            "media_id": obj.get("media_id"),
            "pet_name": obj.get("pet_name"),
            "review_count": obj.get("review_count") if obj.get("review_count") is not None else 1,
            "rating": obj.get("rating"),
            "created_date": obj.get("created_date")
        })
        return _obj


