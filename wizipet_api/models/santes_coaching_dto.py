# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from wizipet_api.models.santes_coaching_reco_aliment_dto import SantesCoachingRecoAlimentDto
from wizipet_api.models.santes_coaching_state_dto import SantesCoachingStateDto
from wizipet_api.models.santes_duree_moy_session_dto import SantesDureeMoySessionDto
from wizipet_api.models.santes_qte_session_jour_dto import SantesQteSessionJourDto
from typing import Optional, Set
from typing_extensions import Self

class SantesCoachingDto(BaseModel):
    """
    SantesCoachingDto
    """ # noqa: E501
    state: Optional[SantesCoachingStateDto] = None
    diagnostic: Optional[StrictStr] = Field(default=None, description="Phrase de diagnostic du coaching en cours.")
    poids_a_perdre_g: Optional[StrictInt] = None
    poids_debut_g: Optional[StrictInt] = None
    poids_cible_g: Optional[StrictInt] = None
    pourcentage_avancement: Optional[StrictInt] = None
    poids_avancement_g: Optional[StrictInt] = None
    start_date: Optional[StrictStr] = None
    end_date: Optional[StrictStr] = None
    aliment_principal: Optional[SantesCoachingRecoAlimentDto] = None
    aliment_secondaire: Optional[SantesCoachingRecoAlimentDto] = None
    reco_qte_session_jour: Optional[SantesQteSessionJourDto] = None
    reco_duree_moy_session: Optional[SantesDureeMoySessionDto] = None
    poids_saisies_count: Optional[StrictInt] = None
    ration_principale_saisies_count: Optional[StrictInt] = None
    ration_principale_saisie_gramme: Optional[StrictInt] = None
    duree_session_saisies_count: Optional[StrictInt] = None
    duree_session_saisie: Optional[StrictInt] = None
    ration_secondaire_saisies_count: Optional[StrictInt] = None
    ration_secondaire_saisie_gramme: Optional[StrictInt] = None
    rythme_conseille_semaine_gramme: Optional[StrictInt] = None
    rythme_reel_semaine_gramme: Optional[StrictInt] = None
    last_pesee_date: Optional[StrictStr] = None
    duree_semaines: Optional[StrictInt] = None
    duree_jours: Optional[StrictInt] = None
    nbr_weekly_pesee: Optional[StrictInt] = None
    nbr_ration_quantite: Optional[StrictInt] = None
    nbr_activity_session: Optional[StrictInt] = None
    nbr_weekly_pesee_is_success: Optional[StrictBool] = None
    nbr_ration_quantite_is_success: Optional[StrictBool] = None
    nbr_activity_session_is_success: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["state", "diagnostic", "poids_a_perdre_g", "poids_debut_g", "poids_cible_g", "pourcentage_avancement", "poids_avancement_g", "start_date", "end_date", "aliment_principal", "aliment_secondaire", "reco_qte_session_jour", "reco_duree_moy_session", "poids_saisies_count", "ration_principale_saisies_count", "ration_principale_saisie_gramme", "duree_session_saisies_count", "duree_session_saisie", "ration_secondaire_saisies_count", "ration_secondaire_saisie_gramme", "rythme_conseille_semaine_gramme", "rythme_reel_semaine_gramme", "last_pesee_date", "duree_semaines", "duree_jours", "nbr_weekly_pesee", "nbr_ration_quantite", "nbr_activity_session", "nbr_weekly_pesee_is_success", "nbr_ration_quantite_is_success", "nbr_activity_session_is_success"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SantesCoachingDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aliment_principal
        if self.aliment_principal:
            _dict['aliment_principal'] = self.aliment_principal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aliment_secondaire
        if self.aliment_secondaire:
            _dict['aliment_secondaire'] = self.aliment_secondaire.to_dict()
        # set to None if diagnostic (nullable) is None
        # and model_fields_set contains the field
        if self.diagnostic is None and "diagnostic" in self.model_fields_set:
            _dict['diagnostic'] = None

        # set to None if ration_principale_saisie_gramme (nullable) is None
        # and model_fields_set contains the field
        if self.ration_principale_saisie_gramme is None and "ration_principale_saisie_gramme" in self.model_fields_set:
            _dict['ration_principale_saisie_gramme'] = None

        # set to None if duree_session_saisie (nullable) is None
        # and model_fields_set contains the field
        if self.duree_session_saisie is None and "duree_session_saisie" in self.model_fields_set:
            _dict['duree_session_saisie'] = None

        # set to None if ration_secondaire_saisie_gramme (nullable) is None
        # and model_fields_set contains the field
        if self.ration_secondaire_saisie_gramme is None and "ration_secondaire_saisie_gramme" in self.model_fields_set:
            _dict['ration_secondaire_saisie_gramme'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SantesCoachingDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SantesCoachingDto) in the input: " + _key)

        _obj = cls.model_validate({
            "state": obj.get("state"),
            "diagnostic": obj.get("diagnostic"),
            "poids_a_perdre_g": obj.get("poids_a_perdre_g"),
            "poids_debut_g": obj.get("poids_debut_g"),
            "poids_cible_g": obj.get("poids_cible_g"),
            "pourcentage_avancement": obj.get("pourcentage_avancement"),
            "poids_avancement_g": obj.get("poids_avancement_g"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "aliment_principal": SantesCoachingRecoAlimentDto.from_dict(obj["aliment_principal"]) if obj.get("aliment_principal") is not None else None,
            "aliment_secondaire": SantesCoachingRecoAlimentDto.from_dict(obj["aliment_secondaire"]) if obj.get("aliment_secondaire") is not None else None,
            "reco_qte_session_jour": obj.get("reco_qte_session_jour"),
            "reco_duree_moy_session": obj.get("reco_duree_moy_session"),
            "poids_saisies_count": obj.get("poids_saisies_count"),
            "ration_principale_saisies_count": obj.get("ration_principale_saisies_count"),
            "ration_principale_saisie_gramme": obj.get("ration_principale_saisie_gramme"),
            "duree_session_saisies_count": obj.get("duree_session_saisies_count"),
            "duree_session_saisie": obj.get("duree_session_saisie"),
            "ration_secondaire_saisies_count": obj.get("ration_secondaire_saisies_count"),
            "ration_secondaire_saisie_gramme": obj.get("ration_secondaire_saisie_gramme"),
            "rythme_conseille_semaine_gramme": obj.get("rythme_conseille_semaine_gramme"),
            "rythme_reel_semaine_gramme": obj.get("rythme_reel_semaine_gramme"),
            "last_pesee_date": obj.get("last_pesee_date"),
            "duree_semaines": obj.get("duree_semaines"),
            "duree_jours": obj.get("duree_jours"),
            "nbr_weekly_pesee": obj.get("nbr_weekly_pesee"),
            "nbr_ration_quantite": obj.get("nbr_ration_quantite"),
            "nbr_activity_session": obj.get("nbr_activity_session"),
            "nbr_weekly_pesee_is_success": obj.get("nbr_weekly_pesee_is_success"),
            "nbr_ration_quantite_is_success": obj.get("nbr_ration_quantite_is_success"),
            "nbr_activity_session_is_success": obj.get("nbr_activity_session_is_success")
        })
        return _obj


