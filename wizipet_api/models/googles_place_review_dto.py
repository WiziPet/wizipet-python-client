# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GooglesPlaceReviewDto(BaseModel):
    """
    GooglesPlaceReviewDto
    """ # noqa: E501
    author_name: Optional[StrictStr] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    relative_time_description: Optional[StrictStr] = None
    time: Optional[StrictInt] = None
    author_url: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    original_language: Optional[StrictStr] = None
    profile_photo_url: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    translated: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["author_name", "rating", "relative_time_description", "time", "author_url", "language", "original_language", "profile_photo_url", "text", "translated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglesPlaceReviewDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['author_name'] = None

        # set to None if relative_time_description (nullable) is None
        # and model_fields_set contains the field
        if self.relative_time_description is None and "relative_time_description" in self.model_fields_set:
            _dict['relative_time_description'] = None

        # set to None if author_url (nullable) is None
        # and model_fields_set contains the field
        if self.author_url is None and "author_url" in self.model_fields_set:
            _dict['author_url'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if original_language (nullable) is None
        # and model_fields_set contains the field
        if self.original_language is None and "original_language" in self.model_fields_set:
            _dict['original_language'] = None

        # set to None if profile_photo_url (nullable) is None
        # and model_fields_set contains the field
        if self.profile_photo_url is None and "profile_photo_url" in self.model_fields_set:
            _dict['profile_photo_url'] = None

        # set to None if text (nullable) is None
        # and model_fields_set contains the field
        if self.text is None and "text" in self.model_fields_set:
            _dict['text'] = None

        # set to None if translated (nullable) is None
        # and model_fields_set contains the field
        if self.translated is None and "translated" in self.model_fields_set:
            _dict['translated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglesPlaceReviewDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GooglesPlaceReviewDto) in the input: " + _key)

        _obj = cls.model_validate({
            "author_name": obj.get("author_name"),
            "rating": obj.get("rating"),
            "relative_time_description": obj.get("relative_time_description"),
            "time": obj.get("time"),
            "author_url": obj.get("author_url"),
            "language": obj.get("language"),
            "original_language": obj.get("original_language"),
            "profile_photo_url": obj.get("profile_photo_url"),
            "text": obj.get("text"),
            "translated": obj.get("translated")
        })
        return _obj


