# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.googles_lat_lng_literal_dto import GooglesLatLngLiteralDto
from typing import Optional, Set
from typing_extensions import Self

class AlertePertePostAlertePerteDto(BaseModel):
    """
    AlertePertePostAlertePerteDto
    """ # noqa: E501
    perte_date: Optional[StrictStr] = None
    image_id_list: Optional[List[UUID]] = None
    location: Optional[GooglesLatLngLiteralDto] = None
    address: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["perte_date", "image_id_list", "location", "address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertePertePostAlertePerteDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if image_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.image_id_list is None and "image_id_list" in self.model_fields_set:
            _dict['image_id_list'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertePertePostAlertePerteDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AlertePertePostAlertePerteDto) in the input: " + _key)

        _obj = cls.model_validate({
            "perte_date": obj.get("perte_date"),
            "image_id_list": obj.get("image_id_list"),
            "location": GooglesLatLngLiteralDto.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "address": obj.get("address")
        })
        return _obj


