# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.groups_pet_summary_dto import GroupsPetSummaryDto
from typing import Optional, Set
from typing_extensions import Self

class GroupsGroupItemDto(BaseModel):
    """
    GroupsGroupItemDto
    """ # noqa: E501
    id: Optional[UUID] = None
    name: Optional[StrictStr] = None
    ville: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    picture_id: Optional[UUID] = None
    is_author: Optional[StrictBool] = None
    is_subscribed: Optional[StrictBool] = None
    is_highlighted: Optional[StrictBool] = None
    member_count: Optional[StrictInt] = None
    member_list_overview: Optional[List[GroupsPetSummaryDto]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "ville", "description", "picture_id", "is_author", "is_subscribed", "is_highlighted", "member_count", "member_list_overview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupsGroupItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in member_list_overview (list)
        _items = []
        if self.member_list_overview:
            for _item_member_list_overview in self.member_list_overview:
                if _item_member_list_overview:
                    _items.append(_item_member_list_overview.to_dict())
            _dict['member_list_overview'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if ville (nullable) is None
        # and model_fields_set contains the field
        if self.ville is None and "ville" in self.model_fields_set:
            _dict['ville'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if member_list_overview (nullable) is None
        # and model_fields_set contains the field
        if self.member_list_overview is None and "member_list_overview" in self.model_fields_set:
            _dict['member_list_overview'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupsGroupItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in GroupsGroupItemDto) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ville": obj.get("ville"),
            "description": obj.get("description"),
            "picture_id": obj.get("picture_id"),
            "is_author": obj.get("is_author"),
            "is_subscribed": obj.get("is_subscribed"),
            "is_highlighted": obj.get("is_highlighted"),
            "member_count": obj.get("member_count"),
            "member_list_overview": [GroupsPetSummaryDto.from_dict(_item) for _item in obj["member_list_overview"]] if obj.get("member_list_overview") is not None else None
        })
        return _obj


