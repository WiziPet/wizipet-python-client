# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from wizipet_api.models.santes_aliment_dto import SantesAlimentDto
from wizipet_api.models.santes_clef_info_dto import SantesClefInfoDto
from wizipet_api.models.santes_duree_moy_session_dto import SantesDureeMoySessionDto
from wizipet_api.models.santes_nombre_repas_dto import SantesNombreRepasDto
from wizipet_api.models.santes_qte_friandise_dto import SantesQteFriandiseDto
from wizipet_api.models.santes_qte_session_jour_dto import SantesQteSessionJourDto
from typing import Optional, Set
from typing_extensions import Self

class SantesInfoDto(BaseModel):
    """
    SantesInfoDto
    """ # noqa: E501
    clef: Optional[SantesClefInfoDto] = None
    valeur_bool: Optional[StrictBool] = None
    valeur_date: Optional[StrictStr] = None
    valeur_int: Optional[StrictInt] = None
    valeur_aliment: Optional[SantesAlimentDto] = None
    valeur_nbr_repas: Optional[SantesNombreRepasDto] = None
    valeur_qte_friandise: Optional[SantesQteFriandiseDto] = None
    valeur_qte_session_jour: Optional[SantesQteSessionJourDto] = None
    valeur_duree_moy_session: Optional[SantesDureeMoySessionDto] = None
    valeur_reference_list: Optional[List[UUID]] = None
    __properties: ClassVar[List[str]] = ["clef", "valeur_bool", "valeur_date", "valeur_int", "valeur_aliment", "valeur_nbr_repas", "valeur_qte_friandise", "valeur_qte_session_jour", "valeur_duree_moy_session", "valeur_reference_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SantesInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of valeur_aliment
        if self.valeur_aliment:
            _dict['valeur_aliment'] = self.valeur_aliment.to_dict()
        # set to None if valeur_bool (nullable) is None
        # and model_fields_set contains the field
        if self.valeur_bool is None and "valeur_bool" in self.model_fields_set:
            _dict['valeur_bool'] = None

        # set to None if valeur_date (nullable) is None
        # and model_fields_set contains the field
        if self.valeur_date is None and "valeur_date" in self.model_fields_set:
            _dict['valeur_date'] = None

        # set to None if valeur_int (nullable) is None
        # and model_fields_set contains the field
        if self.valeur_int is None and "valeur_int" in self.model_fields_set:
            _dict['valeur_int'] = None

        # set to None if valeur_reference_list (nullable) is None
        # and model_fields_set contains the field
        if self.valeur_reference_list is None and "valeur_reference_list" in self.model_fields_set:
            _dict['valeur_reference_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SantesInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SantesInfoDto) in the input: " + _key)

        _obj = cls.model_validate({
            "clef": obj.get("clef"),
            "valeur_bool": obj.get("valeur_bool"),
            "valeur_date": obj.get("valeur_date"),
            "valeur_int": obj.get("valeur_int"),
            "valeur_aliment": SantesAlimentDto.from_dict(obj["valeur_aliment"]) if obj.get("valeur_aliment") is not None else None,
            "valeur_nbr_repas": obj.get("valeur_nbr_repas"),
            "valeur_qte_friandise": obj.get("valeur_qte_friandise"),
            "valeur_qte_session_jour": obj.get("valeur_qte_session_jour"),
            "valeur_duree_moy_session": obj.get("valeur_duree_moy_session"),
            "valeur_reference_list": obj.get("valeur_reference_list")
        })
        return _obj


