# coding: utf-8

"""
    API - API Front

    Wizipet API - API Front

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from wizipet_api.models.santes_assurance_dto import SantesAssuranceDto
from wizipet_api.models.santes_identifiant_dto import SantesIdentifiantDto
from wizipet_api.models.santes_overview_physio_dto import SantesOverviewPhysioDto
from wizipet_api.models.santes_overview_sensibilites_dto import SantesOverviewSensibilitesDto
from wizipet_api.models.santes_sterilisation_dto import SantesSterilisationDto
from wizipet_api.models.santes_veterinaire_dto import SantesVeterinaireDto
from typing import Optional, Set
from typing_extensions import Self

class SantesOverviewDto(BaseModel):
    """
    SantesOverviewDto
    """ # noqa: E501
    physio: Optional[SantesOverviewPhysioDto] = None
    sterilisation: Optional[SantesSterilisationDto] = None
    sensibilites: Optional[SantesOverviewSensibilitesDto] = None
    identifiant: Optional[SantesIdentifiantDto] = None
    veterinaire: Optional[SantesVeterinaireDto] = None
    assurance: Optional[SantesAssuranceDto] = None
    __properties: ClassVar[List[str]] = ["physio", "sterilisation", "sensibilites", "identifiant", "veterinaire", "assurance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SantesOverviewDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of physio
        if self.physio:
            _dict['physio'] = self.physio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sterilisation
        if self.sterilisation:
            _dict['sterilisation'] = self.sterilisation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensibilites
        if self.sensibilites:
            _dict['sensibilites'] = self.sensibilites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identifiant
        if self.identifiant:
            _dict['identifiant'] = self.identifiant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of veterinaire
        if self.veterinaire:
            _dict['veterinaire'] = self.veterinaire.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assurance
        if self.assurance:
            _dict['assurance'] = self.assurance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SantesOverviewDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in SantesOverviewDto) in the input: " + _key)

        _obj = cls.model_validate({
            "physio": SantesOverviewPhysioDto.from_dict(obj["physio"]) if obj.get("physio") is not None else None,
            "sterilisation": SantesSterilisationDto.from_dict(obj["sterilisation"]) if obj.get("sterilisation") is not None else None,
            "sensibilites": SantesOverviewSensibilitesDto.from_dict(obj["sensibilites"]) if obj.get("sensibilites") is not None else None,
            "identifiant": SantesIdentifiantDto.from_dict(obj["identifiant"]) if obj.get("identifiant") is not None else None,
            "veterinaire": SantesVeterinaireDto.from_dict(obj["veterinaire"]) if obj.get("veterinaire") is not None else None,
            "assurance": SantesAssuranceDto.from_dict(obj["assurance"]) if obj.get("assurance") is not None else None
        })
        return _obj


