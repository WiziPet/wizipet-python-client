# coding: utf-8

"""
    API - API Front

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from uuid import UUID
from wizipet_api.models.cartes_pet_friendly_location_type_dto import CartesPetFriendlyLocationTypeDto
from wizipet_api.models.googles_lat_lng_literal_dto import GooglesLatLngLiteralDto
from wizipet_api.models.places_pet_friendly_review_dto import PlacesPetFriendlyReviewDto
from typing import Optional, Set
from typing_extensions import Self

class CartesPetFriendlyPlaceDetailsDto(BaseModel):
    """
    CartesPetFriendlyPlaceDetailsDto
    """ # noqa: E501
    id: Optional[UUID] = None
    author_id: Optional[UUID] = None
    last_update_author_id: Optional[UUID] = None
    last_update_author_race_id: Optional[UUID] = None
    last_update_author_image_id: Optional[UUID] = None
    last_update_author_name: Optional[StrictStr] = None
    race_id: Optional[UUID] = None
    author_image_id: Optional[UUID] = None
    author_name: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    type: Optional[CartesPetFriendlyLocationTypeDto] = None
    image_id_list: Optional[List[UUID]] = None
    always_opened: Optional[StrictBool] = None
    dog_off_leash: Optional[StrictBool] = None
    water_available: Optional[StrictBool] = None
    location: Optional[GooglesLatLngLiteralDto] = None
    address: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = None
    rating_count: Optional[StrictInt] = None
    last_reviews: Optional[List[PlacesPetFriendlyReviewDto]] = None
    commentaire: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    updated_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "author_id", "last_update_author_id", "last_update_author_race_id", "last_update_author_image_id", "last_update_author_name", "race_id", "author_image_id", "author_name", "name", "type", "image_id_list", "always_opened", "dog_off_leash", "water_available", "location", "address", "phone", "url", "rating", "rating_count", "last_reviews", "commentaire", "creation_date", "updated_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CartesPetFriendlyPlaceDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in last_reviews (list)
        _items = []
        if self.last_reviews:
            for _item_last_reviews in self.last_reviews:
                if _item_last_reviews:
                    _items.append(_item_last_reviews.to_dict())
            _dict['last_reviews'] = _items
        # set to None if last_update_author_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_author_id is None and "last_update_author_id" in self.model_fields_set:
            _dict['last_update_author_id'] = None

        # set to None if last_update_author_race_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_author_race_id is None and "last_update_author_race_id" in self.model_fields_set:
            _dict['last_update_author_race_id'] = None

        # set to None if last_update_author_image_id (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_author_image_id is None and "last_update_author_image_id" in self.model_fields_set:
            _dict['last_update_author_image_id'] = None

        # set to None if last_update_author_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_author_name is None and "last_update_author_name" in self.model_fields_set:
            _dict['last_update_author_name'] = None

        # set to None if author_image_id (nullable) is None
        # and model_fields_set contains the field
        if self.author_image_id is None and "author_image_id" in self.model_fields_set:
            _dict['author_image_id'] = None

        # set to None if author_name (nullable) is None
        # and model_fields_set contains the field
        if self.author_name is None and "author_name" in self.model_fields_set:
            _dict['author_name'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if image_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.image_id_list is None and "image_id_list" in self.model_fields_set:
            _dict['image_id_list'] = None

        # set to None if always_opened (nullable) is None
        # and model_fields_set contains the field
        if self.always_opened is None and "always_opened" in self.model_fields_set:
            _dict['always_opened'] = None

        # set to None if dog_off_leash (nullable) is None
        # and model_fields_set contains the field
        if self.dog_off_leash is None and "dog_off_leash" in self.model_fields_set:
            _dict['dog_off_leash'] = None

        # set to None if water_available (nullable) is None
        # and model_fields_set contains the field
        if self.water_available is None and "water_available" in self.model_fields_set:
            _dict['water_available'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        # set to None if last_reviews (nullable) is None
        # and model_fields_set contains the field
        if self.last_reviews is None and "last_reviews" in self.model_fields_set:
            _dict['last_reviews'] = None

        # set to None if commentaire (nullable) is None
        # and model_fields_set contains the field
        if self.commentaire is None and "commentaire" in self.model_fields_set:
            _dict['commentaire'] = None

        # set to None if updated_date (nullable) is None
        # and model_fields_set contains the field
        if self.updated_date is None and "updated_date" in self.model_fields_set:
            _dict['updated_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CartesPetFriendlyPlaceDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CartesPetFriendlyPlaceDetailsDto) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "author_id": obj.get("author_id"),
            "last_update_author_id": obj.get("last_update_author_id"),
            "last_update_author_race_id": obj.get("last_update_author_race_id"),
            "last_update_author_image_id": obj.get("last_update_author_image_id"),
            "last_update_author_name": obj.get("last_update_author_name"),
            "race_id": obj.get("race_id"),
            "author_image_id": obj.get("author_image_id"),
            "author_name": obj.get("author_name"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "image_id_list": obj.get("image_id_list"),
            "always_opened": obj.get("always_opened"),
            "dog_off_leash": obj.get("dog_off_leash"),
            "water_available": obj.get("water_available"),
            "location": GooglesLatLngLiteralDto.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "address": obj.get("address"),
            "phone": obj.get("phone"),
            "url": obj.get("url"),
            "rating": obj.get("rating"),
            "rating_count": obj.get("rating_count"),
            "last_reviews": [PlacesPetFriendlyReviewDto.from_dict(_item) for _item in obj["last_reviews"]] if obj.get("last_reviews") is not None else None,
            "commentaire": obj.get("commentaire"),
            "creation_date": obj.get("creation_date"),
            "updated_date": obj.get("updated_date")
        })
        return _obj


